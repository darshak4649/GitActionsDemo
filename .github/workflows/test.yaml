name: Regal API Call with Token Generation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  call_regal_api:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Generate Bearer Token and Call Regal API
      env:
        REGAL_USERNAME: ${{ secrets.REGAL_USERNAME }}
        REGAL_PASSWORD: ${{ secrets.REGAL_PASSWORD }}
      run: |
        import requests
        import json
        import os

        # Token generation
        token_url = "https://172.16.9.163:30607/auth/realms/regal/protocol/openid-connect/token"
        token_data = {
            'grant_type': 'password',
            'username': os.environ['REGAL_USERNAME'],
            'password': os.environ['REGAL_PASSWORD'],
            'client_id': 'regal-gui'
        }
        token_headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        }

        token_response = requests.post(token_url, data=token_data, headers=token_headers, verify=False)
        
        if token_response.status_code != 200:
            print(f"Failed to generate token. Status code: {token_response.status_code}")
            print(token_response.text)
            exit(1)

        bearer_token = token_response.json()['access_token']
        print("Bearer token generated successfully")

        # API call
        api_url = "https://172.16.9.163:30607/api/regalController/projects/dataTable"
        
        payload = json.dumps({
          "filterMap": {},
          "sortMap": {
            "project": "asc"
          },
          "page": 1,
          "size": 25
        })
        
        headers = {
          'Content-Type': 'application/json',
          'Authorization': f'Bearer {bearer_token}'
        }

        response = requests.post(api_url, headers=headers, data=payload, verify=False)

        print(f"API call status code: {response.status_code}")
        print("API response:")
        print(response.text)

        if response.status_code != 200:
          exit(1)
      shell: python